type ChatConversation @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  ChatMessages: [ChatMessages] @hasMany(indexName: "byChatConversation", fields: ["id"])
  Users: [User] @manyToMany(relationName: "ChatConversationUser")
}

type ChatMessages @model @auth(rules: [{allow: private}]) {
  id: ID!
  Message: String
  User: User @hasOne
  chatconversationID: ID! @index(name: "byChatConversation")
}

type User @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  chatconversations: [ChatConversation] @manyToMany(relationName: "ChatConversationUser")
}

type Student @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee"], operations: [create, read]}]) {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  phoneNumber: String!
  altPhoneNumber: String!
  exams: [String!]
  description: String
  isActive: Boolean
  guardians: [Guardian] @hasMany
}

type Guardian @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee"], operations: [create, read]}]) {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  phoneNumber: String!
  altPhoneNumber: String!
  description: String
  isActive: Boolean
}

type SuperAdmin @model @auth(rules: [{allow: groups, groups: ["SuperAdmin"], operations: [create, update, read, delete]}]) {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  altEmail: String!
  phoneNumber: String!
  altPhoneNumber: String!
  description: String
  isActive: Boolean
  accessControls: [String]
}

type Admin @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}]) {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  altEmail: String!
  phoneNumber: String!
  altPhoneNumber: String!
  description: String
  isActive: Boolean
  accessControls: [String]
}

type Employee @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee"], operations: [create, read]}]) {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  altEmail: String!
  phoneNumber: String!
  altPhoneNumber: String!
  description: String
  isActive: Boolean
  accessControls: [String]
}

type Educator @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee", "Educator"], operations: [create, read]}]) {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  altEmail: String!
  phoneNumber: String!
  altPhoneNumber: String!
  description: String
  isActive: Boolean
  accessControls: [String]
}

type StudentTask @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee"], operations: [create, read]}]) {
  id: ID!
  title: String!
  description: String
  status: String
}

type GuardianTask @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee"], operations: [create, read]}]) {
  id: ID!
  title: String!
  description: String
  status: String
}

type AdminTask @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}]) {
  id: ID!
  title: String!
  description: String
  status: String
}

type EmployeeTask @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee"], operations: [create, read]}]) {
  id: ID!
  title: String!
  description: String
  status: String
}

type EducatorTask @model @auth(rules: [{allow: groups, groups: ["SuperAdmin", "Admin"], operations: [create, update, read, delete]}, {allow: groups, groups: ["Employee"], operations: [create, read]}]) {
  id: ID!
  title: String!
  description: String
  status: String
}
 